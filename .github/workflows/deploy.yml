name: CI/CD for Spring Boot App

on:
  push:
    branches:
      - master  # master 브랜치에 푸시될 때마다 실행

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 실행될 환경

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정 (빌드 속도 향상)
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 빌드 및 테스트
      - name: Build and test with Gradle
        run: ./gradlew build test  # Gradle 빌드 및 테스트 실행

      # 5. Docker Hub 로그인
      - name: Set up Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 빌드하고 푸시
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

      # 7. SSH 키 설정 (EC2에 접속하기 위한 비공개 키)
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem  # 보안상의 이유로 파일 권한 설정

      # 8. EC2에 배포
      - name: Deploy to EC2
        run: |
          # 8-1. EC2로 docker-compose.yml 파일 전송
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/app/docker-compose.yml

          # 8-2. EC2에 접속하여 배포
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/app  # EC2 서버의 앱 디렉토리로 이동

            # 환경 변수 파일(.env) 설정
            rm -f .env
            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env

            # 최신 Docker 이미지를 EC2로 가져오기
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest

            # Docker Compose 실행 (환경 변수 로드)
            sudo docker-compose --env-file .env up -d
          EOF
